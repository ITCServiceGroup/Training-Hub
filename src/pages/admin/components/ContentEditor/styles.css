/* CraftEditor Styles */

/* Viewport */
.viewport {
  width: 100%;
  height: 100%;
  position: relative;
  overflow: hidden;
}

/* Toolbox */
.toolbox-item {
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #f3f4f6;
  border-radius: 4px;
  cursor: move;
  color: #4b5563;
  transition: all 0.2s;
}

.dark .toolbox-item {
  background-color: #334155;
  color: #e2e8f0;
}

.toolbox-item:hover {
  background-color: #e5e7eb;
  color: #111827;
}

.dark .toolbox-item:hover {
  background-color: #475569;
  color: #f8fafc;
}

/* Craft Node Styles */
.craftjs-node-selected {
  position: relative;
}

/* Ensure labels are properly positioned */
.craft-node-label {
  position: absolute !important;
  top: -26px !important;
  left: 0 !important;
  z-index: 11 !important;
  background-color: #0d9488 !important; /* teal-600 */
  color: white !important;
  padding: 4px 6px !important;
  font-size: 12px !important;
  border-radius: 3px !important;
  cursor: default !important;
  user-select: none !important;
  display: flex !important;
  align-items: center !important;
  gap: 6px !important;
  box-shadow: 0 1px 3px rgba(0,0,0,0.2) !important;
  pointer-events: auto !important;
}

/* Style the move handle */
.move-handle {
  cursor: move !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  padding: 4px !important;
  border-radius: 3px !important;
  transition: background-color 0.2s !important;
  width: 24px !important;
  height: 24px !important;
  pointer-events: auto !important;
}

.move-handle:hover {
  background-color: rgba(255, 255, 255, 0.3) !important;
}

.move-handle:active {
  background-color: rgba(255, 255, 255, 0.4) !important;
}

/* Make sure the move handle is always visible and clickable */
.craft-node-label .move-handle {
  z-index: 999 !important;
  position: relative !important;
}

/* Dark mode support */
.dark .craftjs-node-selected {
  outline: none !important; /* Remove default outline */
}

.dark .craft-node-indicator {
  outline-color: var(--color-primary) !important; /* Use dynamic primary color */
}

.dark .react-resizable {
  border-color: #4b5563 !important; /* gray-600 in dark mode */
}

/* Container styles */
.craft-container {
  min-height: 50px;
  width: 100%;
  height: 100%;
  /* Removed border: none !important; to allow custom borders */
  outline: none !important;
  background-color: transparent;
  transition: background-color 0.2s ease, outline 0.2s ease;
  position: relative;
}

/* Container resize handles - similar to table handles */
.craft-container .container-handle-tl,
.craft-container .container-handle-tr,
.craft-container .container-handle-bl,
.craft-container .container-handle-br {
  position: absolute;
  width: 10px;
  height: 10px;
  background-color: var(--color-primary);
  border-radius: 50%;
  border: 2px solid #fff;
  box-shadow: 0px 0px 12px -1px rgba(0, 0, 0, 0.25);
  display: none;
  z-index: 999;
  pointer-events: auto;
}

/* Show handles only when container is selected */
.craft-container.component-selected .container-handle-tl,
.craft-container.component-selected .container-handle-tr,
.craft-container.component-selected .container-handle-bl,
.craft-container.component-selected .container-handle-br {
  display: block;
}

/* Dark mode styling for container handles */
.dark .craft-container .container-handle-tl,
.dark .craft-container .container-handle-tr,
.dark .craft-container .container-handle-bl,
.dark .craft-container .container-handle-br {
  border: 2px solid #1f2937;
  box-shadow: 0px 0px 12px -1px rgba(255, 255, 255, 0.25);
}

/* Position the handles */
.craft-container .container-handle-tl {
  top: -7px;
  left: -7px;
  cursor: nw-resize;
}

.craft-container .container-handle-tr {
  top: -7px;
  right: -7px;
  cursor: ne-resize;
}

.craft-container .container-handle-bl {
  bottom: -7px;
  left: -7px;
  cursor: sw-resize;
}

.craft-container .container-handle-br {
  bottom: -7px;
  right: -7px;
  cursor: se-resize;
}

.craft-container.is-canvas.is-dragging {
  outline: none !important;
  background-color: transparent !important;
}

.craft-container.is-canvas[data-can-drop="true"] {
  outline: 2px dashed var(--color-primary) !important;
  outline-offset: -2px;
  background-color: color-mix(in srgb, var(--color-primary) 3%, transparent) !important;
}

.craft-container.is-canvas.is-dragging[data-can-drop="true"] {
  outline: 2px dashed var(--color-primary) !important;
  outline-offset: -2px;
  background-color: color-mix(in srgb, var(--color-primary) 5%, transparent) !important;
}

/* Add nested container styles */
.craft-container .craft-container.is-canvas[data-can-drop="true"] {
  background-color: color-mix(in srgb, var(--color-primary) 8%, transparent) !important;
}

.craft-container .craft-container .craft-container.is-canvas[data-can-drop="true"] {
  background-color: color-mix(in srgb, var(--color-primary) 12%, transparent) !important;
}

/* Drag depth styles */
.craft-container.is-canvas.depth-1[data-can-drop="true"] {
  background-color: color-mix(in srgb, var(--color-primary) 5%, transparent) !important;
}

.craft-container.is-canvas.depth-2[data-can-drop="true"] {
  background-color: color-mix(in srgb, var(--color-primary) 8%, transparent) !important;
}

.craft-container.is-canvas.depth-3[data-can-drop="true"] {
  background-color: color-mix(in srgb, var(--color-primary) 12%, transparent) !important;
}

/* Text styles */
[contenteditable] {
  outline: none;
  cursor: text;
}

/* Text components should have solid border when selected, but dashed when hovered */
[contenteditable].component-selected::after {
  border-style: solid !important;
}

[contenteditable].component-hovered::after {
  border-style: dashed !important;
}

/* Button styles */
.craft-button {
  transition: all 0.2s;
}

.craft-button:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

/* Button components should have solid border when selected, but dashed when hovered */
.craft-button.component-selected::after {
  border-style: solid !important;
}

.craft-button.component-hovered::after {
  border-style: dashed !important;
}

/* Image styles */
.craft-image-container {
  position: relative;
  box-sizing: border-box;
}

.craft-image {
  max-width: 100%;
  height: auto;
  display: block;
}

/* Image components should have dashed border when selected, and dashed when hovered */
.craft-image-container.component-selected::after {
  border: 2px dashed var(--color-primary) !important;
}

.craft-image-container.component-hovered::after {
  border: 2px dashed var(--color-primary) !important;
}



/* Toolbar styles */
.craft-toolbar {
  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);
  transition: all 0.2s ease;
}

.toolbar-button {
  transition: all 0.2s ease;
}

.toolbar-button:hover {
  background-color: rgba(0, 0, 0, 0.2);
}

/* Drag and drop styles */
/* Global editor state during drag operations */
.craftjs-renderer {
  transition: background-color 0.3s ease;
}

/* When dragging is active, change the background color of the entire editor */
.craftjs-renderer.dragging-active {
  background-color: color-mix(in srgb, var(--color-primary) 3%, transparent) !important;
}

/* Element being dragged */
[draggable="true"] {
  cursor: grabbing;
}

/* Auto-scroll indicators - show gradient at top/bottom of editor when near scroll boundaries */
.craftjs-renderer.dragging-active::before,
.craftjs-renderer.dragging-active::after {
  content: '';
  position: absolute;
  left: 0;
  right: 0;
  height: 100px;
  pointer-events: none;
  opacity: 0;
  transition: opacity 0.3s ease;
  z-index: 10;
}

/* Top scroll indicator */
.craftjs-renderer.dragging-active::before {
  top: 0;
  background: linear-gradient(to bottom, rgba(13, 148, 136, 0.2), transparent);
}

/* Bottom scroll indicator */
.craftjs-renderer.dragging-active::after {
  bottom: 0;
  background: linear-gradient(to top, rgba(13, 148, 136, 0.2), transparent);
}

/* Show indicators when near boundaries */
.craftjs-renderer.dragging-active.scroll-near-top::before {
  opacity: 1;
}

.craftjs-renderer.dragging-active.scroll-near-bottom::after {
  opacity: 1;
}

/* Container that can accept drops - base style */
.craft-container[data-can-drop="true"] {
  background-color: color-mix(in srgb, var(--color-primary) 5%, transparent) !important;
  outline: 2px dashed color-mix(in srgb, var(--color-primary) 50%, transparent) !important;
  outline-offset: -2px;
  transition: all 0.2s ease !important;
}

/* Depth-based styling for containers */
.craft-container.depth-1[data-can-drop="true"] {
  background-color: color-mix(in srgb, var(--color-primary) 5%, transparent) !important;
}

.craft-container.depth-2[data-can-drop="true"] {
  background-color: color-mix(in srgb, var(--color-primary) 8%, transparent) !important;
}

.craft-container.depth-3[data-can-drop="true"] {
  background-color: color-mix(in srgb, var(--color-primary) 12%, transparent) !important;
}

/* Add a subtle pulse animation for containers during drag */
@keyframes containerPulse {
  0% {
    outline-color: rgba(13, 148, 136, 0.3);
  }
  50% {
    outline-color: rgba(13, 148, 136, 0.7);
  }
  100% {
    outline-color: rgba(13, 148, 136, 0.3);
  }
}

.craft-container[data-can-drop="true"] {
  animation: containerPulse 1.5s infinite;
}

/* Element being hovered over during drag */
.craft-container.drag-hover {
  background-color: color-mix(in srgb, var(--color-primary) 15%, transparent) !important;
  outline: 3px dashed var(--color-primary) !important;
  outline-offset: -3px;
  z-index: 10 !important;
  position: relative;
  box-shadow: 0 0 0 4px color-mix(in srgb, var(--color-primary) 10%, transparent) !important;
  animation: none !important;
  transition: all 0.1s ease-in-out !important;
}

/* Enhance the hover effect for craft.js's native indicator */
.indicator-box {
  background-color: rgba(255, 152, 0, 0.5) !important; /* Orange color with higher opacity */
  border: 2px solid #006aff !important; /* Orange color */
  z-index: 9999 !important;
}

/* Animation keyframes */
@keyframes dragPulse {
  0% {
    opacity: 1;
    transform: scale(1);
  }
  50% {
    opacity: 0.8;
    transform: scale(1.01);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes dragTargetPulse {
  0% {
    opacity: 0.3;
  }
  50% {
    opacity: 0.5;
  }
  100% {
    opacity: 0.3;
  }
}

/* Resizable styles */
.react-resizable {
  position: relative;
}

.resizable-border {
  position: relative;
}

.resizable-border::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border: 1px dashed #ccc;
  pointer-events: none;
  z-index: 1;
}

.dark .resizable-border::after {
  border-color: #4b5563;
}

/* Ensure the Resizable component's border aligns with resize handles */
.react-resizable {
  box-sizing: border-box;
  position: relative;
}

/* Node indicator styles */
.craft-node-indicator {
  pointer-events: none;
  transition: all 0.2s ease;
}

/* Selected component styles */
.component-selected {
  position: relative; /* Needed for ::after */
}

/* Sidebar styles */
.sidebar {
  width: 260px;
}

/* Renderer styles */
.craftjs-renderer {
  background-color: #f9fafb;
  min-height: 500px;
  overflow-y: auto !important; /* Ensure vertical scrolling is enabled */
  overflow-x: hidden !important; /* Prevent horizontal scrolling */
  height: 100% !important; /* Take full height of parent */
  position: relative !important; /* Required for scroll calculations */
  scroll-behavior: smooth; /* Enable smooth scrolling */
}

.dark .craftjs-renderer {
  background-color: #1e293b;
}

/* Component Selection and Hover Styles - Based on Craft.js Landing Example */

/* Base style for selected components */
.component-selected, .component-hovered {
  position: relative;
}

/* Border style for all selected components using ::after pseudo-element */
.component-selected::after {
  content: ' ';
  border: 2px dashed var(--color-primary); /* Use dynamic primary color */
  width: 100%;
  height: 100%;
  position: absolute;
  left: 0;
  top: 0;
  pointer-events: none;
  display: block;
  box-sizing: border-box;
  z-index: 1;
}

/* Border style for all hovered components using ::after pseudo-element */
.component-hovered::after {
  content: ' ';
  border: 2px dashed var(--color-primary); /* Use dynamic primary color */
  width: 100%;
  height: 100%;
  position: absolute;
  left: 0;
  top: 0;
  pointer-events: none;
  display: block;
  box-sizing: border-box;
  z-index: 1;
}

/* Special handling for Container component to account for top margin */
/* Create a pseudo-element for the top margin */
.container-with-top-margin::before {
  content: '';
  display: block;
  position: absolute;
  top: calc(-1 * var(--top-margin, 0px));
  left: 0;
  width: 100%;
  height: var(--top-margin, 0px);
  pointer-events: none;
  z-index: 0;
}

/* Adjust the selection box to include the top margin */
.container-with-top-margin.component-selected::after,
.container-with-top-margin.component-hovered::after {
  top: calc(-1 * var(--top-margin, 0px));
  height: calc(100% + var(--top-margin, 0px));
  z-index: 1;
}

/* Ensure table components don't get double borders */
.craft-table.component-selected::after,
.craft-table.component-hovered::after {
  display: none !important;
}


/* Ensure resizable elements have proper overflow handling */
.react-resizable {
  overflow: visible !important; /* Ensure borders aren't clipped */
  box-sizing: border-box !important;
}

/* Hide default resize handles from re-resizable */
.react-resizable-handle {
  display: none;
}

/* Make default resize handles visible but transparent for tables */
.craft-table .react-resizable-handle {
  display: block !important;
  opacity: 0 !important;
  width: 30px !important;
  height: 30px !important;
  background-image: none !important;
  background-color: transparent !important;
  pointer-events: none !important; /* Default to none */
}

/* Only enable pointer events on resize handles when table is selected */
.craft-table.component-selected .react-resizable-handle {
  pointer-events: auto !important;
}

/* Ensure proper stacking context for resize handles */
.craft-image-container.craftjs-node-selected,
.craft-container.craftjs-node-selected,
.craft-table.craftjs-node-selected,
.craft-collapsible-section.craftjs-node-selected {
  z-index: 1;
}

/* Ensure resizable container doesn't clip resize handles */
.react-resizable {
  overflow: visible !important;
}

/* Special handling for re-resizable elements inside tables */
.table-fix:not(.component-selected) .react-resizable,
.table-fix:not(.component-selected) .react-resizable-handle {
  pointer-events: none !important;
}

/* Table styles */
.craft-table {
  position: relative;
  width: 100%;
  height: auto;
  border-collapse: collapse;
  table-layout: fixed; /* Add fixed table layout */
  box-sizing: border-box !important;
}

/* Table cell container */
.craft-table table {
  width: 100%;
  height: auto;
  border-spacing: 0;
  border-collapse: collapse;
  box-sizing: border-box !important;
}

/* Style table cells */
.craft-table td {
  position: relative;
  min-width: 50px;
  box-sizing: border-box !important;
}

/* Ensure Text components within table cells take full width */
.craft-table td .craft-text {
  width: 100%;
  display: inline-block;
  min-height: 24px;
  vertical-align: inherit;
}

/* Column resize handle styles */
.column-resize-handle {
  transition: border-color 0.2s ease;
  pointer-events: auto !important;
}

.column-resize-handle:hover {
  border-right-color: var(--color-primary) !important;
}

/* Ensure table content wrapper allows pointer events for resize handles */
.table-content-wrapper {
  pointer-events: auto !important;
}

.table-content-wrapper table {
  pointer-events: auto !important;
}

.craft-table td {
  pointer-events: auto !important;
}

/* Prevent text selection during column resize */
.craft-table.resizing {
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

.craft-table.resizing * {
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

/* But allow text selection in table cells when not actively resizing */
.craft-table:not(.resizing) .craft-table-text {
  user-select: text !important;
  -webkit-user-select: text !important;
  -moz-user-select: text !important;
  -ms-user-select: text !important;
}

/* TableText component styles */
.craft-table-text {
  width: 100%;
  display: inline-block;
  min-height: 24px;
  white-space: normal;
  word-wrap: break-word;
  overflow-wrap: break-word;
  cursor: text;
  vertical-align: inherit;
}

/* Placeholder styling for table cells */
.craft-table-text.placeholder {
  opacity: 0.6;
  font-style: italic;
}

/* Ensure TableText components are properly styled in table cells */
.craft-table td .craft-table-text {
  width: 100%;
  display: inline-block;
  min-height: 24px;
  vertical-align: inherit;
}

/* Table management buttons container */
.craft-table-controls {
  margin-bottom: 8px;
}

/* Table management controls */
.craft-table-management-btn {
  font-size: 12px;
  padding: 4px 8px;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.2s;
}

.craft-table-management-btn:hover {
  transform: translateY(-1px);
}

/* Table cell styles */
.craft-table-cell {
  padding: 8px;
  position: relative;
  min-width: 50px;
  min-height: 60px;
  box-sizing: border-box;
}

/* Vertical alignment classes for table cells */
.craft-table td.cell-align-top {
  vertical-align: top !important;
}

.craft-table td.cell-align-middle {
  vertical-align: middle !important;
}

.craft-table td.cell-align-bottom {
  vertical-align: bottom !important;
}

/* Dark mode table cells */
.dark .craft-table {
  border-color: #374151;
}

.dark .craft-table-cell {
  border-color: #374151;
}

/* Table header cell styles */
.craft-table-header {
  background-color: #f3f4f6;
  font-weight: 500;
}

.dark .craft-table-header {
  background-color: #374151;
}

/* Alternating row styles */
.craft-table-row-alternate {
  background-color: #f9fafb;
}

.dark .craft-table-row-alternate {
  background-color: #1f2937;
}

/* Column resize handle */
.column-resize-handle {
  background-color: transparent;
  transition: background-color 0.2s;
}

.column-resize-handle:hover {
  background-color: color-mix(in srgb, var(--color-primary) 50%, transparent);
}

/* Row resize handle */
.row-resize-handle {
  background-color: transparent;
  transition: background-color 0.2s;
}

.row-resize-handle:hover {
  background-color: color-mix(in srgb, var(--color-primary) 50%, transparent);
}

/* Table components should have dashed border when selected or hovered */
.craft-table.component-selected::after,
.craft-table.component-hovered::after {
  display: none !important; /* Remove the inner border */
}

.craft-table.component-selected {
  outline: 2px dashed var(--color-primary) !important;
  outline-offset: 0px !important;
  box-shadow: 0 0 0 4px rgba(255, 255, 255, 0.5);
}

.craft-table.component-hovered {
  outline: 2px dashed var(--color-primary) !important;
  outline-offset: 0px !important;
}

/* Ensure the Resizer component's children take full width and height */
.craft-table > div {
  width: 100% !important;
  height: 100% !important;
  box-sizing: border-box !important;
}

/* Position the default resize handles for tables */
.craft-table .react-resizable-handle-nw,
.craft-table .react-resizable-handle-ne,
.craft-table .react-resizable-handle-sw,
.craft-table .react-resizable-handle-se {
  position: absolute !important;
  z-index: 998 !important;
}

/* Add custom resize handles for tables */
.craft-table .table-handle-tl,
.craft-table .table-handle-tr,
.craft-table .table-handle-bl,
.craft-table .table-handle-br {
  position: absolute;
  width: 10px;
  height: 10px;
  background-color: var(--color-primary);
  border-radius: 50%;
  border: 2px solid #fff;
  box-shadow: 0px 0px 12px -1px rgba(0, 0, 0, 0.25);
  z-index: 100;
  pointer-events: auto; /* These are only rendered when table is selected anyway */
  cursor: pointer;
  display: none; /* Hide by default */
}

/* Only show resize handles when table is selected */
.craft-table.component-selected .table-handle-tl,
.craft-table.component-selected .table-handle-tr,
.craft-table.component-selected .table-handle-bl,
.craft-table.component-selected .table-handle-br {
  display: block;
}

/* Top-left handle */
.craft-table .table-handle-tl {
  top: -7px;
  left: -7px;
  cursor: nw-resize;
  z-index: 999;
}

/* Top-right handle */
.craft-table .table-handle-tr {
  top: -7px;
  right: -7px;
  cursor: ne-resize;
  z-index: 999;
}

/* Bottom-left handle */
.craft-table .table-handle-bl {
  bottom: -7px;
  left: -7px;
  cursor: sw-resize;
  z-index: 999;
}

/* Bottom-right handle */
.craft-table .table-handle-br {
  bottom: -7px;
  right: -7px;
  cursor: se-resize;
  z-index: 999;
}

/* Dark mode styling for table */
.dark .craft-table.component-selected {
  box-shadow: 0 0 0 4px rgba(31, 41, 55, 0.5);
}

/* Dark mode styling for container */
.dark .craft-container.component-selected::after {
  border: 2px dashed var(--color-primary) !important;
  box-shadow: 0 0 0 4px rgba(31, 41, 55, 0.5);
}

.dark .craft-container.component-hovered::after {
  border: 2px dashed var(--color-primary) !important;
}

.dark .craft-table .table-handle-tl,
.dark .craft-table .table-handle-tr,
.dark .craft-table .table-handle-bl,
.dark .craft-table .table-handle-br {
  border-color: #1f2937;
  background-color: var(--color-primary);
  box-shadow: 0px 0px 12px -1px rgba(0, 0, 0, 0.4);
}

/* Fix for table blocking pointer events to components below it - AGGRESSIVE VERSION */
.table-outer-wrapper .table-fix {
  pointer-events: none !important;
}

/* Only enable pointer events when the table is selected */
.table-outer-wrapper .table-fix.component-selected {
  pointer-events: auto !important;
}

/* Ensure all elements inside a selected table can receive pointer events */
.table-outer-wrapper .table-fix.component-selected * {
  pointer-events: auto !important;
}

/* Ensure text selection works in selected table cells */
.table-outer-wrapper .table-fix.component-selected td,
.table-outer-wrapper .table-fix.component-selected .craft-table-text {
  user-select: text !important;
  -webkit-user-select: text !important;
  -moz-user-select: text !important;
  -ms-user-select: text !important;
}

/* Make sure the table outer wrapper doesn't block pointer events */
.table-outer-wrapper {
  pointer-events: none !important;
}

/* Special handling for the table content to make it clickable even when not selected */
.table-outer-wrapper .table-fix:not(.component-selected) .table-content-wrapper {
  pointer-events: auto !important;
}

/* Make sure the table itself can be clicked */
.table-outer-wrapper .table-fix:not(.component-selected) .table-content-wrapper > table {
  pointer-events: auto !important;
}

/* Ensure all other elements inside the table don't block pointer events when not selected */
.table-outer-wrapper .table-fix:not(.component-selected) * {
  pointer-events: none !important;
}

/* Override the above rule for the table and its direct wrapper */
.table-outer-wrapper .table-fix:not(.component-selected) .table-content-wrapper,
.table-outer-wrapper .table-fix:not(.component-selected) .table-content-wrapper > table {
  pointer-events: auto !important;
}

/* CRITICAL: Allow text selection in table cells */
.table-outer-wrapper .table-fix:not(.component-selected) .table-content-wrapper td,
.table-outer-wrapper .table-fix:not(.component-selected) .table-content-wrapper .craft-table-text {
  pointer-events: auto !important;
  user-select: text !important;
  -webkit-user-select: text !important;
  -moz-user-select: text !important;
  -ms-user-select: text !important;
}

/* Create a transparent overlay that can be clicked to select the table */
.table-outer-wrapper .table-fix:not(.component-selected)::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 1;
  pointer-events: auto !important;
  cursor: pointer;
}

/* Styling for the table outer wrapper */
.table-outer-wrapper {
  display: inline-block;
  position: relative;
  box-sizing: content-box;
}

/* Ensure the table wrapper doesn't affect the table's dimensions */
.table-outer-wrapper .craft-table {
  display: block;
  box-sizing: border-box;
}

/* Make sure the resize handles are positioned relative to the table, not the wrapper */
.table-outer-wrapper .craft-table .react-resizable-handle,
.table-outer-wrapper .craft-table .table-handle-tl,
.table-outer-wrapper .craft-table .table-handle-tr,
.table-outer-wrapper .craft-table .table-handle-bl,
.table-outer-wrapper .craft-table .table-handle-br {
  position: absolute;
}

/* CollapsibleSection Styles */
.craft-collapsible-section {
  position: relative;
  width: 100%;
}





/* Visual resize handles for CollapsibleSection */
.craft-collapsible-section .collapsible-handle-left,
.craft-collapsible-section .collapsible-handle-right {
  position: absolute;
  width: 10px;
  height: 10px;
  background-color: var(--color-primary);
  border-radius: 50%;
  border: 2px solid #fff;
  box-shadow: 0px 0px 12px -1px rgba(0, 0, 0, 0.25);
  display: none;
  z-index: 999;
  pointer-events: none; /* Make handles non-interactive */
  transition: transform 0.2s ease;
}

/* Show visual handles when section is selected */
.craft-collapsible-section:has(.component-selected) .collapsible-handle-left,
.craft-collapsible-section:has(.component-selected) .collapsible-handle-right,
.craft-collapsible-section.component-selected .collapsible-handle-left,
.craft-collapsible-section.component-selected .collapsible-handle-right {
  display: block;
}

/* Dark mode styling for visual handles */
.dark .craft-collapsible-section .collapsible-handle-left,
.dark .craft-collapsible-section .collapsible-handle-right {
  border: 2px solid #1f2937;
  box-shadow: 0px 0px 12px -1px rgba(255, 255, 255, 0.25);
}

/* Variables for handle positioning */
.craft-collapsible-section {
  --handle-left-x: 1px;
  --handle-right-x: 1px;
  --handle-y: 50%;
  --handle-y-offset: -50%;
}

/* Position the visual handles */
.craft-collapsible-section .collapsible-handle-left {
  top: var(--handle-y);
  left: var(--handle-left-x);
  transform: translate(-50%, var(--handle-y-offset));
}

.craft-collapsible-section .collapsible-handle-right {
  top: var(--handle-y);
  right: var(--handle-right-x);
  transform: translate(50%, var(--handle-y-offset));
}

/* Actual resize handles (invisible but interactive) */
.craft-collapsible-section .react-resizable-handle {
  position: absolute !important;
  display: none !important; /* Hidden by default */
  width: 20px !important; /* Wide grab area */
  height: 100% !important;
  top: 0 !important;
  background: none !important;
  z-index: 998 !important;
  opacity: 0 !important;
}

/* Only show resize handles when section is selected */
.craft-collapsible-section.component-selected .react-resizable-handle {
  display: block !important;
  pointer-events: auto !important;
}

/* Position the actual resize handles - aligned with visual handles */
.craft-collapsible-section .react-resizable-handle-w {
  left: calc(var(--handle-left-x) - 10px) !important;
  width: 20px !important;
  cursor: ew-resize !important;
}

.craft-collapsible-section .react-resizable-handle-e {
  right: calc(var(--handle-right-x) - 10px) !important;
  width: 20px !important;
  cursor: ew-resize !important;
}

/* Highlight resize areas on hover */
.craft-collapsible-section .react-resizable-handle:hover::after {
  content: '';
  position: absolute;
  top: 0;
  height: 100%;
  width: 4px;
  background-color: var(--color-primary);
  opacity: 0.3;
  left: 50%;
  transform: translateX(-50%);
}

/* No border class for CollapsibleSection */
.craft-collapsible-header.no-border,
.craft-collapsible-content.no-border {
  border: none !important;
  border-style: none !important;
  border-width: 0 !important;
  border-color: transparent !important;
}

/* Style for the steps container */
.craft-steps-container {
  position: relative;
  width: 100%;
}

/* Style for each step canvas */
.craft-step-content {
  min-height: 100px;
  width: 100%;
  position: relative;
  border: none;
  border-radius: 4px;
  padding: 8px;
  margin-bottom: 16px;
  transition: all 0.2s ease;
}

/* Style for the step content when it's the target of a drag operation */
.craft-step-content.drag-hover {
  background-color: color-mix(in srgb, var(--color-primary) 15%, transparent) !important;
  outline: 3px dashed var(--color-primary) !important;
  outline-offset: -3px;
  box-shadow: 0 0 10px color-mix(in srgb, var(--color-primary) 30%, transparent) !important;
  transition: all 0.2s ease-in-out;
}

/* CollapsibleSection components should have dashed border when selected or hovered */
.craft-collapsible-section.component-selected::after {
  border: 2px dashed var(--color-primary) !important;
}

.craft-collapsible-section.component-hovered::after {
  border: 2px dashed var(--color-primary) !important;
}

/* Visual resize handles for Tabs component - similar to CollapsibleSection */
.craft-tabs .tabs-handle-left,
.craft-tabs .tabs-handle-right {
  position: absolute;
  width: 10px;
  height: 10px;
  background-color: var(--color-primary);
  border-radius: 50%;
  border: 2px solid #fff;
  box-shadow: 0px 0px 12px -1px rgba(0, 0, 0, 0.25);
  display: none;
  z-index: 999;
  pointer-events: none; /* Make handles non-interactive */
  transition: transform 0.2s ease;
}

/* Dark theme support for tabs handles */
.dark .craft-tabs .tabs-handle-left,
.dark .craft-tabs .tabs-handle-right {
  border: 2px solid #1f2937; /* dark: gray-800 */
  box-shadow: 0px 0px 12px -1px rgba(255, 255, 255, 0.25);
}

/* Show visual handles only when tabs component is selected */
.craft-tabs.component-selected .tabs-handle-left,
.craft-tabs.component-selected .tabs-handle-right {
  display: block;
}

/* Variables for handle positioning */
.craft-tabs {
  --handle-left-x: 1px;
  --handle-right-x: 1px;
  --handle-y: 50%;
  --handle-y-offset: -50%;
}

/* Position the visual handles */
.craft-tabs .tabs-handle-left {
  top: var(--handle-y);
  left: var(--handle-left-x);
  transform: translate(-50%, var(--handle-y-offset));
}

.craft-tabs .tabs-handle-right {
  top: var(--handle-y);
  right: var(--handle-right-x);
  transform: translate(50%, var(--handle-y-offset));
}

/* Actual resize handles (invisible but interactive) for tabs */
.craft-tabs .react-resizable-handle {
  position: absolute !important;
  display: none !important; /* Hidden by default */
  width: 20px !important; /* Wide grab area */
  height: 100% !important;
  top: 0 !important;
  background: none !important;
  z-index: 998 !important;
  opacity: 0 !important;
}

/* Only show resize handles when tabs component is selected */
.craft-tabs.component-selected .react-resizable-handle {
  display: block !important;
  pointer-events: auto !important;
}

/* Position the actual resize handles - aligned with visual handles */
.craft-tabs .react-resizable-handle-w {
  left: calc(var(--handle-left-x) - 10px) !important;
  width: 20px !important;
  cursor: ew-resize !important;
}

.craft-tabs .react-resizable-handle-e {
  right: calc(var(--handle-right-x) - 10px) !important;
  width: 20px !important;
  cursor: ew-resize !important;
}

/* Highlight resize areas on hover for tabs */
.craft-tabs .react-resizable-handle:hover::after {
  content: '';
  position: absolute;
  top: 0;
  height: 100%;
  width: 4px;
  background-color: var(--color-primary);
  opacity: 0.3;
  left: 50%;
  transform: translateX(-50%);
}

/* Tabs components should have dashed border when selected or hovered */
.craft-tabs.component-selected::after,
.craft-tabs.component-hovered::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border: 2px dashed var(--color-primary) !important;
  pointer-events: none;
  z-index: 1;
}

/* Responsive Container Styles */
/* Add a class for horizontal containers */
.craft-container-horizontal {
  display: flex;
  flex-direction: row;
}

/* Media query for small screens - stack horizontal containers vertically */
@media (max-width: 768px) {
  /* Force horizontal containers to stack vertically */
  .craft-container-horizontal {
    flex-direction: column !important;
  }

  /* Target the re-resizable component directly */
  .craft-container-horizontal > .react-resizable {
    width: 100% !important;
    max-width: 100% !important;
    margin-bottom: 15px !important;
  }

  /* Target the direct children of the Resizer component */
  .craft-container-horizontal > .react-resizable > div {
    width: 100% !important;
    max-width: 100% !important;
  }

  /* Target nested Resizer components */
  .craft-container-horizontal .react-resizable .react-resizable {
    width: 100% !important;
    max-width: 100% !important;
    margin-bottom: 15px !important;
  }

  /* Override flex properties for all children */
  .craft-container-horizontal .react-resizable,
  .craft-container-horizontal .react-resizable > div,
  .craft-container-horizontal .craft-container {
    flex: none !important;
    flex-basis: auto !important;
    flex-grow: 0 !important;
    flex-shrink: 0 !important;
  }

  /* Override any inline styles with extremely high specificity */
  .craft-container-horizontal div[style*="width"],
  .craft-container-horizontal div[style*="max-width"],
  .craft-container-horizontal div[style*="flex-basis"] {
    width: 100% !important;
    max-width: 100% !important;
    flex-basis: auto !important;
  }

  /* Target the specific DOM structure of nested containers */
  .craft-container-horizontal > .react-resizable > div > .react-resizable,
  .craft-container-horizontal > .react-resizable > div > div > .react-resizable {
    width: 100% !important;
    max-width: 100% !important;
    margin-bottom: 15px !important;
  }

  /* Remove margin from the last child to avoid extra spacing */
  .craft-container-horizontal > .react-resizable:last-child,
  .craft-container-horizontal .react-resizable .react-resizable:last-child {
    margin-bottom: 0 !important;
  }
}

/* Wireframe styles for special components during drag operations */
.craft-tabs[data-wireframe-visible="true"],
.craft-collapsible-section[data-wireframe-visible="true"] {
  outline: 2px dashed color-mix(in srgb, var(--color-primary) 50%, transparent) !important;
  outline-offset: -2px;
  transition: all 0.2s ease !important;
  animation: containerPulse 1.5s infinite;
}

/* Special wireframe styling for tables during drag operations */
.craft-table[data-wireframe-visible="true"] {
  position: relative !important;
  animation: containerPulse 1.5s infinite;
}

/* Create a visible wireframe border that sits on top of table content */
.craft-table[data-wireframe-visible="true"]::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border: 2px dashed color-mix(in srgb, var(--color-primary) 70%, transparent);
  pointer-events: none;
  z-index: 1000;
  border-radius: 4px;
  transition: all 0.2s ease !important;
}
